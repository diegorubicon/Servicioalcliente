'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="CRM")>  _
Partial Public Class dbDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertContacto(instance As Contacto)
    End Sub
  Partial Private Sub UpdateContacto(instance As Contacto)
    End Sub
  Partial Private Sub DeleteContacto(instance As Contacto)
    End Sub
  Partial Private Sub InsertOrigen(instance As Origen)
    End Sub
  Partial Private Sub UpdateOrigen(instance As Origen)
    End Sub
  Partial Private Sub DeleteOrigen(instance As Origen)
    End Sub
  Partial Private Sub InsertInteresStatus(instance As InteresStatus)
    End Sub
  Partial Private Sub UpdateInteresStatus(instance As InteresStatus)
    End Sub
  Partial Private Sub DeleteInteresStatus(instance As InteresStatus)
    End Sub
  Partial Private Sub Insertprovincia(instance As provincia)
    End Sub
  Partial Private Sub Updateprovincia(instance As provincia)
    End Sub
  Partial Private Sub Deleteprovincia(instance As provincia)
    End Sub
  Partial Private Sub Insertnota(instance As nota)
    End Sub
  Partial Private Sub Updatenota(instance As nota)
    End Sub
  Partial Private Sub Deletenota(instance As nota)
    End Sub
  Partial Private Sub InsertListaItem(instance As ListaItem)
    End Sub
  Partial Private Sub UpdateListaItem(instance As ListaItem)
    End Sub
  Partial Private Sub DeleteListaItem(instance As ListaItem)
    End Sub
  Partial Private Sub Insertcantone(instance As cantone)
    End Sub
  Partial Private Sub Updatecantone(instance As cantone)
    End Sub
  Partial Private Sub Deletecantone(instance As cantone)
    End Sub
  Partial Private Sub Insertdistrito(instance As distrito)
    End Sub
  Partial Private Sub Updatedistrito(instance As distrito)
    End Sub
  Partial Private Sub Deletedistrito(instance As distrito)
    End Sub
  Partial Private Sub InsertDistribuidor(instance As Distribuidor)
    End Sub
  Partial Private Sub UpdateDistribuidor(instance As Distribuidor)
    End Sub
  Partial Private Sub DeleteDistribuidor(instance As Distribuidor)
    End Sub
  Partial Private Sub InsertOportunidadEstado(instance As OportunidadEstado)
    End Sub
  Partial Private Sub UpdateOportunidadEstado(instance As OportunidadEstado)
    End Sub
  Partial Private Sub DeleteOportunidadEstado(instance As OportunidadEstado)
    End Sub
  Partial Private Sub InsertOportunida(instance As Oportunida)
    End Sub
  Partial Private Sub UpdateOportunida(instance As Oportunida)
    End Sub
  Partial Private Sub DeleteOportunida(instance As Oportunida)
    End Sub
  Partial Private Sub InsertOportunidadCierre(instance As OportunidadCierre)
    End Sub
  Partial Private Sub UpdateOportunidadCierre(instance As OportunidadCierre)
    End Sub
  Partial Private Sub DeleteOportunidadCierre(instance As OportunidadCierre)
    End Sub
  Partial Private Sub InsertCierreEstado(instance As CierreEstado)
    End Sub
  Partial Private Sub UpdateCierreEstado(instance As CierreEstado)
    End Sub
  Partial Private Sub DeleteCierreEstado(instance As CierreEstado)
    End Sub
  Partial Private Sub InsertDistribuidorHistorico(instance As DistribuidorHistorico)
    End Sub
  Partial Private Sub UpdateDistribuidorHistorico(instance As DistribuidorHistorico)
    End Sub
  Partial Private Sub DeleteDistribuidorHistorico(instance As DistribuidorHistorico)
    End Sub
  Partial Private Sub Insertlista(instance As lista)
    End Sub
  Partial Private Sub Updatelista(instance As lista)
    End Sub
  Partial Private Sub Deletelista(instance As lista)
    End Sub
  Partial Private Sub InsertInteresType(instance As InteresType)
    End Sub
  Partial Private Sub UpdateInteresType(instance As InteresType)
    End Sub
  Partial Private Sub DeleteInteresType(instance As InteresType)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.TrackingContacts.My.MySettings.Default.CRMConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Contactos() As System.Data.Linq.Table(Of Contacto)
		Get
			Return Me.GetTable(Of Contacto)
		End Get
	End Property
	
	Public ReadOnly Property Origens() As System.Data.Linq.Table(Of Origen)
		Get
			Return Me.GetTable(Of Origen)
		End Get
	End Property
	
	Public ReadOnly Property InteresStatus() As System.Data.Linq.Table(Of InteresStatus)
		Get
			Return Me.GetTable(Of InteresStatus)
		End Get
	End Property
	
	Public ReadOnly Property provincias() As System.Data.Linq.Table(Of provincia)
		Get
			Return Me.GetTable(Of provincia)
		End Get
	End Property
	
	Public ReadOnly Property notas() As System.Data.Linq.Table(Of nota)
		Get
			Return Me.GetTable(Of nota)
		End Get
	End Property
	
	Public ReadOnly Property ListaItems() As System.Data.Linq.Table(Of ListaItem)
		Get
			Return Me.GetTable(Of ListaItem)
		End Get
	End Property
	
	Public ReadOnly Property cantones() As System.Data.Linq.Table(Of cantone)
		Get
			Return Me.GetTable(Of cantone)
		End Get
	End Property
	
	Public ReadOnly Property distritos() As System.Data.Linq.Table(Of distrito)
		Get
			Return Me.GetTable(Of distrito)
		End Get
	End Property
	
	Public ReadOnly Property Distribuidors() As System.Data.Linq.Table(Of Distribuidor)
		Get
			Return Me.GetTable(Of Distribuidor)
		End Get
	End Property
	
	Public ReadOnly Property OportunidadEstados() As System.Data.Linq.Table(Of OportunidadEstado)
		Get
			Return Me.GetTable(Of OportunidadEstado)
		End Get
	End Property
	
	Public ReadOnly Property Oportunidas() As System.Data.Linq.Table(Of Oportunida)
		Get
			Return Me.GetTable(Of Oportunida)
		End Get
	End Property
	
	Public ReadOnly Property OportunidadCierres() As System.Data.Linq.Table(Of OportunidadCierre)
		Get
			Return Me.GetTable(Of OportunidadCierre)
		End Get
	End Property
	
	Public ReadOnly Property CierreEstados() As System.Data.Linq.Table(Of CierreEstado)
		Get
			Return Me.GetTable(Of CierreEstado)
		End Get
	End Property
	
	Public ReadOnly Property DistribuidorHistoricos() As System.Data.Linq.Table(Of DistribuidorHistorico)
		Get
			Return Me.GetTable(Of DistribuidorHistorico)
		End Get
	End Property
	
	Public ReadOnly Property listas() As System.Data.Linq.Table(Of lista)
		Get
			Return Me.GetTable(Of lista)
		End Get
	End Property
	
	Public ReadOnly Property InteresTypes() As System.Data.Linq.Table(Of InteresType)
		Get
			Return Me.GetTable(Of InteresType)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetPreContactsByOrigin")>  _
	Public Function GetPreContactsByOrigin(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal origen As System.Nullable(Of Integer)) As ISingleResult(Of Contacto)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), origen)
		Return CType(result.ReturnValue,ISingleResult(Of Contacto))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[pre-contactos]")>  _
Partial Public Class Contacto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Decimal
	
	Private _nombre As String
	
	Private _apellido_01 As String
	
	Private _apellido_02 As String
	
	Private _telefono_01 As String
	
	Private _telefono_02 As String
	
	Private _email As String
	
	Private _provincia As System.Nullable(Of Integer)
	
	Private _lugar As String
	
	Private _origen As System.Nullable(Of Integer)
	
	Private _creado_el As System.Nullable(Of Date)
	
	Private _creado_por As String
	
	Private _sintelefono As Integer
	
	Private _NumLlamada As Integer
	
	Private _referido_por As String
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _PrecontactoListas As EntitySet(Of ListaItem)
	
	Private _Origen1 As EntityRef(Of Origen)
	
	Private _provincia1 As EntityRef(Of provincia)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Decimal)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub Onapellido_01Changing(value As String)
    End Sub
    Partial Private Sub Onapellido_01Changed()
    End Sub
    Partial Private Sub Onapellido_02Changing(value As String)
    End Sub
    Partial Private Sub Onapellido_02Changed()
    End Sub
    Partial Private Sub Ontelefono_01Changing(value As String)
    End Sub
    Partial Private Sub Ontelefono_01Changed()
    End Sub
    Partial Private Sub Ontelefono_02Changing(value As String)
    End Sub
    Partial Private Sub Ontelefono_02Changed()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub Onid_provinciaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_provinciaChanged()
    End Sub
    Partial Private Sub OnlugarChanging(value As String)
    End Sub
    Partial Private Sub OnlugarChanged()
    End Sub
    Partial Private Sub OnorigenChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnorigenChanged()
    End Sub
    Partial Private Sub Oncreado_elChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreado_elChanged()
    End Sub
    Partial Private Sub Oncreado_porChanging(value As String)
    End Sub
    Partial Private Sub Oncreado_porChanged()
    End Sub
    Partial Private Sub OnsintelefonoChanging(value As Integer)
    End Sub
    Partial Private Sub OnsintelefonoChanged()
    End Sub
    Partial Private Sub OnNumLlamadaChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumLlamadaChanged()
    End Sub
    Partial Private Sub Onreferido_porChanging(value As String)
    End Sub
    Partial Private Sub Onreferido_porChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PrecontactoListas = New EntitySet(Of ListaItem)(AddressOf Me.attach_PrecontactoListas, AddressOf Me.detach_PrecontactoListas)
		Me._Origen1 = CType(Nothing, EntityRef(Of Origen))
		Me._provincia1 = CType(Nothing, EntityRef(Of provincia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Decimal
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="VarChar(250)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido_01", DbType:="VarChar(250)")>  _
	Public Property apellido_01() As String
		Get
			Return Me._apellido_01
		End Get
		Set
			If (String.Equals(Me._apellido_01, value) = false) Then
				Me.Onapellido_01Changing(value)
				Me.SendPropertyChanging
				Me._apellido_01 = value
				Me.SendPropertyChanged("apellido_01")
				Me.Onapellido_01Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido_02", DbType:="VarChar(250)")>  _
	Public Property apellido_02() As String
		Get
			Return Me._apellido_02
		End Get
		Set
			If (String.Equals(Me._apellido_02, value) = false) Then
				Me.Onapellido_02Changing(value)
				Me.SendPropertyChanging
				Me._apellido_02 = value
				Me.SendPropertyChanged("apellido_02")
				Me.Onapellido_02Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono_01", DbType:="VarChar(250)")>  _
	Public Property telefono_01() As String
		Get
			Return Me._telefono_01
		End Get
		Set
			If (String.Equals(Me._telefono_01, value) = false) Then
				Me.Ontelefono_01Changing(value)
				Me.SendPropertyChanging
				Me._telefono_01 = value
				Me.SendPropertyChanged("telefono_01")
				Me.Ontelefono_01Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_telefono_02", DbType:="VarChar(250)")>  _
	Public Property telefono_02() As String
		Get
			Return Me._telefono_02
		End Get
		Set
			If (String.Equals(Me._telefono_02, value) = false) Then
				Me.Ontelefono_02Changing(value)
				Me.SendPropertyChanging
				Me._telefono_02 = value
				Me.SendPropertyChanged("telefono_02")
				Me.Ontelefono_02Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(250)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="provincia", Storage:="_provincia", DbType:="Int")>  _
	Public Property id_provincia() As System.Nullable(Of Integer)
		Get
			Return Me._provincia
		End Get
		Set
			If (Me._provincia.Equals(value) = false) Then
				Me.Onid_provinciaChanging(value)
				Me.SendPropertyChanging
				Me._provincia = value
				Me.SendPropertyChanged("id_provincia")
				Me.Onid_provinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lugar", DbType:="VarChar(250)")>  _
	Public Property lugar() As String
		Get
			Return Me._lugar
		End Get
		Set
			If (String.Equals(Me._lugar, value) = false) Then
				Me.OnlugarChanging(value)
				Me.SendPropertyChanging
				Me._lugar = value
				Me.SendPropertyChanged("lugar")
				Me.OnlugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_origen", DbType:="Int")>  _
	Public Property origen() As System.Nullable(Of Integer)
		Get
			Return Me._origen
		End Get
		Set
			If (Me._origen.Equals(value) = false) Then
				If Me._Origen1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnorigenChanging(value)
				Me.SendPropertyChanging
				Me._origen = value
				Me.SendPropertyChanged("origen")
				Me.OnorigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_el", DbType:="DateTime")>  _
	Public Property creado_el() As System.Nullable(Of Date)
		Get
			Return Me._creado_el
		End Get
		Set
			If (Me._creado_el.Equals(value) = false) Then
				Me.Oncreado_elChanging(value)
				Me.SendPropertyChanging
				Me._creado_el = value
				Me.SendPropertyChanged("creado_el")
				Me.Oncreado_elChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_por", DbType:="VarChar(50)")>  _
	Public Property creado_por() As String
		Get
			Return Me._creado_por
		End Get
		Set
			If (String.Equals(Me._creado_por, value) = false) Then
				Me.Oncreado_porChanging(value)
				Me.SendPropertyChanging
				Me._creado_por = value
				Me.SendPropertyChanged("creado_por")
				Me.Oncreado_porChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sintelefono", DbType:="int")>  _
	Public Property sintelefono() As Integer
		Get
			Return Me._sintelefono
		End Get
		Set
			If ((Me._sintelefono = value)  _
						= false) Then
				Me.OnsintelefonoChanging(value)
				Me.SendPropertyChanging
				Me._sintelefono = value
				Me.SendPropertyChanged("sintelefono")
				Me.OnsintelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="NumLlamadas", Storage:="_NumLlamada", DbType:="int")>  _
	Public Property NumLlamada() As Integer
		Get
			Return Me._NumLlamada
		End Get
		Set
			If ((Me._NumLlamada = value)  _
						= false) Then
				Me.OnNumLlamadaChanging(value)
				Me.SendPropertyChanging
				Me._NumLlamada = value
				Me.SendPropertyChanged("NumLlamada")
				Me.OnNumLlamadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referido_por", DbType:="VarChar(300)")>  _
	Public Property referido_por() As String
		Get
			Return Me._referido_por
		End Get
		Set
			If (String.Equals(Me._referido_por, value) = false) Then
				Me.Onreferido_porChanging(value)
				Me.SendPropertyChanging
				Me._referido_por = value
				Me.SendPropertyChanged("referido_por")
				Me.Onreferido_porChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="DateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contacto_ListaItem", Storage:="_PrecontactoListas", ThisKey:="id", OtherKey:="id_precontacto")>  _
	Public Property ListaItems() As EntitySet(Of ListaItem)
		Get
			Return Me._PrecontactoListas
		End Get
		Set
			Me._PrecontactoListas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Origen_Contacto", Storage:="_Origen1", ThisKey:="origen", OtherKey:="origen", IsForeignKey:=true)>  _
	Public Property Origen1() As Origen
		Get
			Return Me._Origen1.Entity
		End Get
		Set
			Dim previousValue As Origen = Me._Origen1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Origen1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Origen1.Entity = Nothing
					previousValue.Contactos.Remove(Me)
				End If
				Me._Origen1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contactos.Add(Me)
					Me._origen = value.origen
				Else
					Me._origen = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Origen1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_Contacto", Storage:="_provincia1", ThisKey:="id_provincia", OtherKey:="id_provincia", IsForeignKey:=true)>  _
	Public Property provincia1() As provincia
		Get
			Return Me._provincia1.Entity
		End Get
		Set
			Dim previousValue As provincia = Me._provincia1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._provincia1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._provincia1.Entity = Nothing
					previousValue.Contactos.Remove(Me)
				End If
				Me._provincia1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Contactos.Add(Me)
					Me._provincia = value.id_provincia
				Else
					Me._provincia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("provincia1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PrecontactoListas(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.Contacto = Me
	End Sub
	
	Private Sub detach_PrecontactoListas(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.Contacto = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.origenes")>  _
Partial Public Class Origen
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _origen As Integer
	
	Private _descripcion As String
	
	Private _PreContacts As EntitySet(Of Contacto)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorigenChanging(value As Integer)
    End Sub
    Partial Private Sub OnorigenChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PreContacts = New EntitySet(Of Contacto)(AddressOf Me.attach_PreContacts, AddressOf Me.detach_PreContacts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_origen", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property origen() As Integer
		Get
			Return Me._origen
		End Get
		Set
			If ((Me._origen = value)  _
						= false) Then
				Me.OnorigenChanging(value)
				Me.SendPropertyChanging
				Me._origen = value
				Me.SendPropertyChanged("origen")
				Me.OnorigenChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(250)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Origen_Contacto", Storage:="_PreContacts", ThisKey:="origen", OtherKey:="origen")>  _
	Public Property Contactos() As EntitySet(Of Contacto)
		Get
			Return Me._PreContacts
		End Get
		Set
			Me._PreContacts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PreContacts(ByVal entity As Contacto)
		Me.SendPropertyChanging
		entity.Origen1 = Me
	End Sub
	
	Private Sub detach_PreContacts(ByVal entity As Contacto)
		Me.SendPropertyChanging
		entity.Origen1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipos_estado_precontacto")>  _
Partial Public Class InteresStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _estado As Integer
	
	Private _descripcion As String
	
	Private _PrecontactoListas As EntitySet(Of ListaItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnestadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnestadoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PrecontactoListas = New EntitySet(Of ListaItem)(AddressOf Me.attach_PrecontactoListas, AddressOf Me.detach_PrecontactoListas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property estado() As Integer
		Get
			Return Me._estado
		End Get
		Set
			If ((Me._estado = value)  _
						= false) Then
				Me.OnestadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("estado")
				Me.OnestadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="InteresStatus_ListaItem", Storage:="_PrecontactoListas", ThisKey:="estado", OtherKey:="estado")>  _
	Public Property ListaItems() As EntitySet(Of ListaItem)
		Get
			Return Me._PrecontactoListas
		End Get
		Set
			Me._PrecontactoListas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PrecontactoListas(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.InteresStatus = Me
	End Sub
	
	Private Sub detach_PrecontactoListas(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.InteresStatus = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.provincias")>  _
Partial Public Class provincia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _provincia As Integer
	
	Private _descripcion As String
	
	Private _PreContacts As EntitySet(Of Contacto)
	
	Private _cantones As EntitySet(Of cantone)
	
	Private _Oportunidades As EntitySet(Of Oportunida)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_provinciaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_provinciaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PreContacts = New EntitySet(Of Contacto)(AddressOf Me.attach_PreContacts, AddressOf Me.detach_PreContacts)
		Me._cantones = New EntitySet(Of cantone)(AddressOf Me.attach_cantones, AddressOf Me.detach_cantones)
		Me._Oportunidades = New EntitySet(Of Oportunida)(AddressOf Me.attach_Oportunidades, AddressOf Me.detach_Oportunidades)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="provincia", Storage:="_provincia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_provincia() As Integer
		Get
			Return Me._provincia
		End Get
		Set
			If ((Me._provincia = value)  _
						= false) Then
				Me.Onid_provinciaChanging(value)
				Me.SendPropertyChanging
				Me._provincia = value
				Me.SendPropertyChanged("id_provincia")
				Me.Onid_provinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(250)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_Contacto", Storage:="_PreContacts", ThisKey:="id_provincia", OtherKey:="id_provincia")>  _
	Public Property Contactos() As EntitySet(Of Contacto)
		Get
			Return Me._PreContacts
		End Get
		Set
			Me._PreContacts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_cantone", Storage:="_cantones", ThisKey:="id_provincia", OtherKey:="provincia")>  _
	Public Property cantones() As EntitySet(Of cantone)
		Get
			Return Me._cantones
		End Get
		Set
			Me._cantones.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_Oportunida", Storage:="_Oportunidades", ThisKey:="id_provincia", OtherKey:="id_provincia")>  _
	Public Property Oportunidades() As EntitySet(Of Oportunida)
		Get
			Return Me._Oportunidades
		End Get
		Set
			Me._Oportunidades.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PreContacts(ByVal entity As Contacto)
		Me.SendPropertyChanging
		entity.provincia1 = Me
	End Sub
	
	Private Sub detach_PreContacts(ByVal entity As Contacto)
		Me.SendPropertyChanging
		entity.provincia1 = Nothing
	End Sub
	
	Private Sub attach_cantones(ByVal entity As cantone)
		Me.SendPropertyChanging
		entity.provincia1 = Me
	End Sub
	
	Private Sub detach_cantones(ByVal entity As cantone)
		Me.SendPropertyChanging
		entity.provincia1 = Nothing
	End Sub
	
	Private Sub attach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.ParentProvincia = Me
	End Sub
	
	Private Sub detach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.ParentProvincia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.notas")>  _
Partial Public Class nota
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Decimal
	
	Private _id_precontacto As System.Nullable(Of Decimal)
	
	Private _id_lista As System.Nullable(Of Integer)
	
	Private _observacion As String
	
	Private _id_InteresActual As System.Nullable(Of Integer)
	
	Private _id_EstadoActual As System.Nullable(Of Integer)
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _creado_por As String
	
	Private _PrecontactoLista As EntityRef(Of ListaItem)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Decimal)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onid_precontactoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub Onid_precontactoChanged()
    End Sub
    Partial Private Sub Onid_listaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_listaChanged()
    End Sub
    Partial Private Sub OnobservacionChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionChanged()
    End Sub
    Partial Private Sub Onid_InteresActualChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_InteresActualChanged()
    End Sub
    Partial Private Sub Onid_EstadoActualChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_EstadoActualChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub Oncreado_porChanging(value As String)
    End Sub
    Partial Private Sub Oncreado_porChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PrecontactoLista = CType(Nothing, EntityRef(Of ListaItem))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Decimal
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_precontacto", DbType:="Decimal(18,0)")>  _
	Public Property id_precontacto() As System.Nullable(Of Decimal)
		Get
			Return Me._id_precontacto
		End Get
		Set
			If (Me._id_precontacto.Equals(value) = false) Then
				If Me._PrecontactoLista.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_precontactoChanging(value)
				Me.SendPropertyChanging
				Me._id_precontacto = value
				Me.SendPropertyChanged("id_precontacto")
				Me.Onid_precontactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_lista", DbType:="Int")>  _
	Public Property id_lista() As System.Nullable(Of Integer)
		Get
			Return Me._id_lista
		End Get
		Set
			If (Me._id_lista.Equals(value) = false) Then
				If Me._PrecontactoLista.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_listaChanging(value)
				Me.SendPropertyChanging
				Me._id_lista = value
				Me.SendPropertyChanged("id_lista")
				Me.Onid_listaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observacion", DbType:="VarChar(MAX)")>  _
	Public Property observacion() As String
		Get
			Return Me._observacion
		End Get
		Set
			If (String.Equals(Me._observacion, value) = false) Then
				Me.OnobservacionChanging(value)
				Me.SendPropertyChanging
				Me._observacion = value
				Me.SendPropertyChanged("observacion")
				Me.OnobservacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_InteresActual", DbType:="Int")>  _
	Public Property id_InteresActual() As System.Nullable(Of Integer)
		Get
			Return Me._id_InteresActual
		End Get
		Set
			If (Me._id_InteresActual.Equals(value) = false) Then
				Me.Onid_InteresActualChanging(value)
				Me.SendPropertyChanging
				Me._id_InteresActual = value
				Me.SendPropertyChanged("id_InteresActual")
				Me.Onid_InteresActualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_EstadoActual", DbType:="Int")>  _
	Public Property id_EstadoActual() As System.Nullable(Of Integer)
		Get
			Return Me._id_EstadoActual
		End Get
		Set
			If (Me._id_EstadoActual.Equals(value) = false) Then
				Me.Onid_EstadoActualChanging(value)
				Me.SendPropertyChanging
				Me._id_EstadoActual = value
				Me.SendPropertyChanged("id_EstadoActual")
				Me.Onid_EstadoActualChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fecha", DbType:="DateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_por", DbType:="VarChar(50)")>  _
	Public Property creado_por() As String
		Get
			Return Me._creado_por
		End Get
		Set
			If (String.Equals(Me._creado_por, value) = false) Then
				Me.Oncreado_porChanging(value)
				Me.SendPropertyChanging
				Me._creado_por = value
				Me.SendPropertyChanged("creado_por")
				Me.Oncreado_porChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListaItem_nota", Storage:="_PrecontactoLista", ThisKey:="id_precontacto,id_lista", OtherKey:="id_precontacto,id_lista", IsForeignKey:=true)>  _
	Public Property ListaItem() As ListaItem
		Get
			Return Me._PrecontactoLista.Entity
		End Get
		Set
			Dim previousValue As ListaItem = Me._PrecontactoLista.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PrecontactoLista.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PrecontactoLista.Entity = Nothing
					previousValue.notas.Remove(Me)
				End If
				Me._PrecontactoLista.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.notas.Add(Me)
					Me._id_precontacto = value.id_precontacto
					Me._id_lista = value.id_lista
				Else
					Me._id_precontacto = CType(Nothing, Nullable(Of Decimal))
					Me._id_lista = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ListaItem")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.precontactos_intereses")>  _
Partial Public Class ListaItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Decimal
	
	Private _lista As Integer
	
	Private _interes As Integer
	
	Private _estado As Integer
	
	Private _interes_especifico As String
	
	Private _creado_el As System.Nullable(Of Date)
	
	Private _creado_por As String
	
	Private _notas As EntitySet(Of nota)
	
	Private _Oportunidades As EntityRef(Of Oportunida)
	
	Private _PreContact As EntityRef(Of Contacto)
	
	Private _InteresStatus As EntityRef(Of InteresStatus)
	
	Private _list As EntityRef(Of lista)
	
	Private _InteresType As EntityRef(Of InteresType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_precontactoChanging(value As Decimal)
    End Sub
    Partial Private Sub Onid_precontactoChanged()
    End Sub
    Partial Private Sub Onid_listaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_listaChanged()
    End Sub
    Partial Private Sub OninteresChanging(value As Integer)
    End Sub
    Partial Private Sub OninteresChanged()
    End Sub
    Partial Private Sub OnestadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnestadoChanged()
    End Sub
    Partial Private Sub Oninteres_especificoChanging(value As String)
    End Sub
    Partial Private Sub Oninteres_especificoChanged()
    End Sub
    Partial Private Sub Oncreado_elChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreado_elChanged()
    End Sub
    Partial Private Sub Oncreado_porChanging(value As String)
    End Sub
    Partial Private Sub Oncreado_porChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._notas = New EntitySet(Of nota)(AddressOf Me.attach_notas, AddressOf Me.detach_notas)
		Me._Oportunidades = CType(Nothing, EntityRef(Of Oportunida))
		Me._PreContact = CType(Nothing, EntityRef(Of Contacto))
		Me._InteresStatus = CType(Nothing, EntityRef(Of InteresStatus))
		Me._list = CType(Nothing, EntityRef(Of lista))
		Me._InteresType = CType(Nothing, EntityRef(Of InteresType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="id", Storage:="_id", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_precontacto() As Decimal
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.Onid_precontactoChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id_precontacto")
				Me.Onid_precontactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="lista", Storage:="_lista", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_lista() As Integer
		Get
			Return Me._lista
		End Get
		Set
			If ((Me._lista = value)  _
						= false) Then
				Me.Onid_listaChanging(value)
				Me.SendPropertyChanging
				Me._lista = value
				Me.SendPropertyChanged("id_lista")
				Me.Onid_listaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_interes", DbType:="Int NOT NULL")>  _
	Public Property interes() As Integer
		Get
			Return Me._interes
		End Get
		Set
			If ((Me._interes = value)  _
						= false) Then
				If Me._InteresType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OninteresChanging(value)
				Me.SendPropertyChanging
				Me._interes = value
				Me.SendPropertyChanged("interes")
				Me.OninteresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estado", DbType:="Int NOT NULL")>  _
	Public Property estado() As Integer
		Get
			Return Me._estado
		End Get
		Set
			If ((Me._estado = value)  _
						= false) Then
				If Me._InteresStatus.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnestadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("estado")
				Me.OnestadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_interes_especifico", DbType:="VarChar(MAX)")>  _
	Public Property interes_especifico() As String
		Get
			Return Me._interes_especifico
		End Get
		Set
			If (String.Equals(Me._interes_especifico, value) = false) Then
				Me.Oninteres_especificoChanging(value)
				Me.SendPropertyChanging
				Me._interes_especifico = value
				Me.SendPropertyChanged("interes_especifico")
				Me.Oninteres_especificoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_el", DbType:="DateTime")>  _
	Public Property creado_el() As System.Nullable(Of Date)
		Get
			Return Me._creado_el
		End Get
		Set
			If (Me._creado_el.Equals(value) = false) Then
				Me.Oncreado_elChanging(value)
				Me.SendPropertyChanging
				Me._creado_el = value
				Me.SendPropertyChanged("creado_el")
				Me.Oncreado_elChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_por", DbType:="VarChar(50)")>  _
	Public Property creado_por() As String
		Get
			Return Me._creado_por
		End Get
		Set
			If (String.Equals(Me._creado_por, value) = false) Then
				Me.Oncreado_porChanging(value)
				Me.SendPropertyChanging
				Me._creado_por = value
				Me.SendPropertyChanged("creado_por")
				Me.Oncreado_porChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListaItem_nota", Storage:="_notas", ThisKey:="id_precontacto,id_lista", OtherKey:="id_precontacto,id_lista")>  _
	Public Property notas() As EntitySet(Of nota)
		Get
			Return Me._notas
		End Get
		Set
			Me._notas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListaItem_Oportunida", Storage:="_Oportunidades", ThisKey:="id_precontacto,id_lista", OtherKey:="id_precontacto,id_lista", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Oportunidad() As Oportunida
		Get
			Return Me._Oportunidades.Entity
		End Get
		Set
			Dim previousValue As Oportunida = Me._Oportunidades.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Oportunidades.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Oportunidades.Entity = Nothing
					previousValue.ListaItem = Nothing
				End If
				Me._Oportunidades.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ListaItem = Me
				End If
				Me.SendPropertyChanged("Oportunidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Contacto_ListaItem", Storage:="_PreContact", ThisKey:="id_precontacto", OtherKey:="id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Contacto() As Contacto
		Get
			Return Me._PreContact.Entity
		End Get
		Set
			Dim previousValue As Contacto = Me._PreContact.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PreContact.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PreContact.Entity = Nothing
					previousValue.ListaItems.Remove(Me)
				End If
				Me._PreContact.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListaItems.Add(Me)
					Me._id = value.id
				Else
					Me._id = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("Contacto")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="InteresStatus_ListaItem", Storage:="_InteresStatus", ThisKey:="estado", OtherKey:="estado", IsForeignKey:=true)>  _
	Public Property InteresStatus() As InteresStatus
		Get
			Return Me._InteresStatus.Entity
		End Get
		Set
			Dim previousValue As InteresStatus = Me._InteresStatus.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._InteresStatus.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._InteresStatus.Entity = Nothing
					previousValue.ListaItems.Remove(Me)
				End If
				Me._InteresStatus.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListaItems.Add(Me)
					Me._estado = value.estado
				Else
					Me._estado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("InteresStatus")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lista_ListaItem", Storage:="_list", ThisKey:="id_lista", OtherKey:="id_lista", IsForeignKey:=true)>  _
	Public Property list() As lista
		Get
			Return Me._list.Entity
		End Get
		Set
			Dim previousValue As lista = Me._list.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._list.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._list.Entity = Nothing
					previousValue.ListaItems.Remove(Me)
				End If
				Me._list.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListaItems.Add(Me)
					Me._lista = value.id_lista
				Else
					Me._lista = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("list")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="InteresType_ListaItem", Storage:="_InteresType", ThisKey:="interes,id_lista", OtherKey:="interes,lista", IsForeignKey:=true)>  _
	Public Property InteresType() As InteresType
		Get
			Return Me._InteresType.Entity
		End Get
		Set
			Dim previousValue As InteresType = Me._InteresType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._InteresType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._InteresType.Entity = Nothing
					previousValue.ListaItems.Remove(Me)
				End If
				Me._InteresType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ListaItems.Add(Me)
					Me._interes = value.interes
					Me._lista = value.lista
				Else
					Me._interes = CType(Nothing, Integer)
					Me._lista = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("InteresType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_notas(ByVal entity As nota)
		Me.SendPropertyChanging
		entity.ListaItem = Me
	End Sub
	
	Private Sub detach_notas(ByVal entity As nota)
		Me.SendPropertyChanging
		entity.ListaItem = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.cantones")>  _
Partial Public Class cantone
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _provincia As Integer
	
	Private _canton As Integer
	
	Private _descripcion As String
	
	Private _distritos As EntitySet(Of distrito)
	
	Private _Oportunidades As EntitySet(Of Oportunida)
	
	Private _provincia1 As EntityRef(Of provincia)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprovinciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnprovinciaChanged()
    End Sub
    Partial Private Sub OncantonChanging(value As Integer)
    End Sub
    Partial Private Sub OncantonChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._distritos = New EntitySet(Of distrito)(AddressOf Me.attach_distritos, AddressOf Me.detach_distritos)
		Me._Oportunidades = New EntitySet(Of Oportunida)(AddressOf Me.attach_Oportunidades, AddressOf Me.detach_Oportunidades)
		Me._provincia1 = CType(Nothing, EntityRef(Of provincia))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_provincia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property provincia() As Integer
		Get
			Return Me._provincia
		End Get
		Set
			If ((Me._provincia = value)  _
						= false) Then
				If Me._provincia1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnprovinciaChanging(value)
				Me.SendPropertyChanging
				Me._provincia = value
				Me.SendPropertyChanged("provincia")
				Me.OnprovinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canton", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property canton() As Integer
		Get
			Return Me._canton
		End Get
		Set
			If ((Me._canton = value)  _
						= false) Then
				Me.OncantonChanging(value)
				Me.SendPropertyChanging
				Me._canton = value
				Me.SendPropertyChanged("canton")
				Me.OncantonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cantone_distrito", Storage:="_distritos", ThisKey:="provincia,canton", OtherKey:="provincia,canton")>  _
	Public Property distritos() As EntitySet(Of distrito)
		Get
			Return Me._distritos
		End Get
		Set
			Me._distritos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cantone_Oportunida", Storage:="_Oportunidades", ThisKey:="provincia,canton", OtherKey:="id_provincia,id_canton")>  _
	Public Property Oportunidades() As EntitySet(Of Oportunida)
		Get
			Return Me._Oportunidades
		End Get
		Set
			Me._Oportunidades.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_cantone", Storage:="_provincia1", ThisKey:="provincia", OtherKey:="id_provincia", IsForeignKey:=true)>  _
	Public Property provincia1() As provincia
		Get
			Return Me._provincia1.Entity
		End Get
		Set
			Dim previousValue As provincia = Me._provincia1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._provincia1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._provincia1.Entity = Nothing
					previousValue.cantones.Remove(Me)
				End If
				Me._provincia1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cantones.Add(Me)
					Me._provincia = value.id_provincia
				Else
					Me._provincia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("provincia1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_distritos(ByVal entity As distrito)
		Me.SendPropertyChanging
		entity.cantone = Me
	End Sub
	
	Private Sub detach_distritos(ByVal entity As distrito)
		Me.SendPropertyChanging
		entity.cantone = Nothing
	End Sub
	
	Private Sub attach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.ParentCanton = Me
	End Sub
	
	Private Sub detach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.ParentCanton = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.distritos")>  _
Partial Public Class distrito
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _provincia As Integer
	
	Private _canton As Integer
	
	Private _distrito As Integer
	
	Private _descripcion As String
	
	Private _Oportunidades As EntitySet(Of Oportunida)
	
	Private _cantone As EntityRef(Of cantone)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnprovinciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnprovinciaChanged()
    End Sub
    Partial Private Sub OncantonChanging(value As Integer)
    End Sub
    Partial Private Sub OncantonChanged()
    End Sub
    Partial Private Sub OndistritoChanging(value As Integer)
    End Sub
    Partial Private Sub OndistritoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Oportunidades = New EntitySet(Of Oportunida)(AddressOf Me.attach_Oportunidades, AddressOf Me.detach_Oportunidades)
		Me._cantone = CType(Nothing, EntityRef(Of cantone))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_provincia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property provincia() As Integer
		Get
			Return Me._provincia
		End Get
		Set
			If ((Me._provincia = value)  _
						= false) Then
				If Me._cantone.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnprovinciaChanging(value)
				Me.SendPropertyChanging
				Me._provincia = value
				Me.SendPropertyChanged("provincia")
				Me.OnprovinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_canton", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property canton() As Integer
		Get
			Return Me._canton
		End Get
		Set
			If ((Me._canton = value)  _
						= false) Then
				If Me._cantone.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncantonChanging(value)
				Me.SendPropertyChanging
				Me._canton = value
				Me.SendPropertyChanged("canton")
				Me.OncantonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distrito", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property distrito() As Integer
		Get
			Return Me._distrito
		End Get
		Set
			If ((Me._distrito = value)  _
						= false) Then
				Me.OndistritoChanging(value)
				Me.SendPropertyChanging
				Me._distrito = value
				Me.SendPropertyChanged("distrito")
				Me.OndistritoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(50)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="distrito_Oportunida", Storage:="_Oportunidades", ThisKey:="provincia,canton,distrito", OtherKey:="id_provincia,id_canton,id_distrito")>  _
	Public Property Oportunidades() As EntitySet(Of Oportunida)
		Get
			Return Me._Oportunidades
		End Get
		Set
			Me._Oportunidades.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cantone_distrito", Storage:="_cantone", ThisKey:="provincia,canton", OtherKey:="provincia,canton", IsForeignKey:=true)>  _
	Public Property cantone() As cantone
		Get
			Return Me._cantone.Entity
		End Get
		Set
			Dim previousValue As cantone = Me._cantone.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cantone.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cantone.Entity = Nothing
					previousValue.distritos.Remove(Me)
				End If
				Me._cantone.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.distritos.Add(Me)
					Me._provincia = value.provincia
					Me._canton = value.canton
				Else
					Me._provincia = CType(Nothing, Integer)
					Me._canton = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("cantone")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.ParentDistrito = Me
	End Sub
	
	Private Sub detach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.ParentDistrito = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Distribuidores")>  _
Partial Public Class Distribuidor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_distribuidor As String
	
	Private _nombre As String
	
	Private _apellido_01 As String
	
	Private _apellido_02 As String
	
	Private _Oportunidades As EntitySet(Of Oportunida)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_distribuidorChanging(value As String)
    End Sub
    Partial Private Sub Onid_distribuidorChanged()
    End Sub
    Partial Private Sub OnnombreChanging(value As String)
    End Sub
    Partial Private Sub OnnombreChanged()
    End Sub
    Partial Private Sub Onapellido_01Changing(value As String)
    End Sub
    Partial Private Sub Onapellido_01Changed()
    End Sub
    Partial Private Sub Onapellido_02Changing(value As String)
    End Sub
    Partial Private Sub Onapellido_02Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Oportunidades = New EntitySet(Of Oportunida)(AddressOf Me.attach_Oportunidades, AddressOf Me.detach_Oportunidades)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_distribuidor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property id_distribuidor() As String
		Get
			Return Me._id_distribuidor
		End Get
		Set
			If (String.Equals(Me._id_distribuidor, value) = false) Then
				Me.Onid_distribuidorChanging(value)
				Me.SendPropertyChanging
				Me._id_distribuidor = value
				Me.SendPropertyChanged("id_distribuidor")
				Me.Onid_distribuidorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombre", DbType:="VarChar(150)")>  _
	Public Property nombre() As String
		Get
			Return Me._nombre
		End Get
		Set
			If (String.Equals(Me._nombre, value) = false) Then
				Me.OnnombreChanging(value)
				Me.SendPropertyChanging
				Me._nombre = value
				Me.SendPropertyChanged("nombre")
				Me.OnnombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido_01", DbType:="VarChar(150)")>  _
	Public Property apellido_01() As String
		Get
			Return Me._apellido_01
		End Get
		Set
			If (String.Equals(Me._apellido_01, value) = false) Then
				Me.Onapellido_01Changing(value)
				Me.SendPropertyChanging
				Me._apellido_01 = value
				Me.SendPropertyChanged("apellido_01")
				Me.Onapellido_01Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_apellido_02", DbType:="VarChar(150)")>  _
	Public Property apellido_02() As String
		Get
			Return Me._apellido_02
		End Get
		Set
			If (String.Equals(Me._apellido_02, value) = false) Then
				Me.Onapellido_02Changing(value)
				Me.SendPropertyChanging
				Me._apellido_02 = value
				Me.SendPropertyChanged("apellido_02")
				Me.Onapellido_02Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Distribuidor_Oportunida", Storage:="_Oportunidades", ThisKey:="id_distribuidor", OtherKey:="distribuidor")>  _
	Public Property Oportunidas() As EntitySet(Of Oportunida)
		Get
			Return Me._Oportunidades
		End Get
		Set
			Me._Oportunidades.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.Distribuidor1 = Me
	End Sub
	
	Private Sub detach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.Distribuidor1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OportunidadEstados")>  _
Partial Public Class OportunidadEstado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _estado As Integer
	
	Private _descripcion As String
	
	Private _Oportunidades As EntitySet(Of Oportunida)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnestadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnestadoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Oportunidades = New EntitySet(Of Oportunida)(AddressOf Me.attach_Oportunidades, AddressOf Me.detach_Oportunidades)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property estado() As Integer
		Get
			Return Me._estado
		End Get
		Set
			If ((Me._estado = value)  _
						= false) Then
				Me.OnestadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("estado")
				Me.OnestadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OportunidadEstado_Oportunida", Storage:="_Oportunidades", ThisKey:="estado", OtherKey:="id_estado")>  _
	Public Property Oportunidades() As EntitySet(Of Oportunida)
		Get
			Return Me._Oportunidades
		End Get
		Set
			Me._Oportunidades.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.estado = Me
	End Sub
	
	Private Sub detach_Oportunidades(ByVal entity As Oportunida)
		Me.SendPropertyChanging
		entity.estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Oportunidades")>  _
Partial Public Class Oportunida
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Decimal
	
	Private _id_precontacto As Decimal
	
	Private _id_lista As Integer
	
	Private _identificacion As String
	
	Private _provincia As Integer
	
	Private _canton As Integer
	
	Private _distrito As Integer
	
	Private _direccion As String
	
	Private _distribuidor As String
	
	Private _estado As System.Nullable(Of Integer)
	
	Private _referencia As String
	
	Private _creado_el As System.Nullable(Of Date)
	
	Private _cierre As EntityRef(Of OportunidadCierre)
	
	Private _DistribuidorHistoricos As EntitySet(Of DistribuidorHistorico)
	
	Private _Distribuidor1 As EntityRef(Of Distribuidor)
	
	Private _OportunidadEstado As EntityRef(Of OportunidadEstado)
	
	Private _PrecontactoLista As EntityRef(Of ListaItem)
	
	Private _ParentProvincia As EntityRef(Of provincia)
	
	Private _ParentCanton As EntityRef(Of cantone)
	
	Private _ParentDistrito As EntityRef(Of distrito)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Decimal)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onid_precontactoChanging(value As Decimal)
    End Sub
    Partial Private Sub Onid_precontactoChanged()
    End Sub
    Partial Private Sub Onid_listaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_listaChanged()
    End Sub
    Partial Private Sub OnidentificacionChanging(value As String)
    End Sub
    Partial Private Sub OnidentificacionChanged()
    End Sub
    Partial Private Sub Onid_provinciaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_provinciaChanged()
    End Sub
    Partial Private Sub Onid_cantonChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_cantonChanged()
    End Sub
    Partial Private Sub Onid_distritoChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_distritoChanged()
    End Sub
    Partial Private Sub OndireccionChanging(value As String)
    End Sub
    Partial Private Sub OndireccionChanged()
    End Sub
    Partial Private Sub OndistribuidorChanging(value As String)
    End Sub
    Partial Private Sub OndistribuidorChanged()
    End Sub
    Partial Private Sub Onid_estadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_estadoChanged()
    End Sub
    Partial Private Sub OnreferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnreferenciaChanged()
    End Sub
    Partial Private Sub Oncreado_elChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreado_elChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._cierre = CType(Nothing, EntityRef(Of OportunidadCierre))
		Me._DistribuidorHistoricos = New EntitySet(Of DistribuidorHistorico)(AddressOf Me.attach_DistribuidorHistoricos, AddressOf Me.detach_DistribuidorHistoricos)
		Me._Distribuidor1 = CType(Nothing, EntityRef(Of Distribuidor))
		Me._OportunidadEstado = CType(Nothing, EntityRef(Of OportunidadEstado))
		Me._PrecontactoLista = CType(Nothing, EntityRef(Of ListaItem))
		Me._ParentProvincia = CType(Nothing, EntityRef(Of provincia))
		Me._ParentCanton = CType(Nothing, EntityRef(Of cantone))
		Me._ParentDistrito = CType(Nothing, EntityRef(Of distrito))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Decimal
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_precontacto", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property id_precontacto() As Decimal
		Get
			Return Me._id_precontacto
		End Get
		Set
			If ((Me._id_precontacto = value)  _
						= false) Then
				If Me._PrecontactoLista.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_precontactoChanging(value)
				Me.SendPropertyChanging
				Me._id_precontacto = value
				Me.SendPropertyChanged("id_precontacto")
				Me.Onid_precontactoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_lista", DbType:="Int NOT NULL")>  _
	Public Property id_lista() As Integer
		Get
			Return Me._id_lista
		End Get
		Set
			If ((Me._id_lista = value)  _
						= false) Then
				If Me._PrecontactoLista.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_listaChanging(value)
				Me.SendPropertyChanging
				Me._id_lista = value
				Me.SendPropertyChanged("id_lista")
				Me.Onid_listaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_identificacion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property identificacion() As String
		Get
			Return Me._identificacion
		End Get
		Set
			If (String.Equals(Me._identificacion, value) = false) Then
				Me.OnidentificacionChanging(value)
				Me.SendPropertyChanging
				Me._identificacion = value
				Me.SendPropertyChanged("identificacion")
				Me.OnidentificacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="provincia", Storage:="_provincia", DbType:="Int NOT NULL")>  _
	Public Property id_provincia() As Integer
		Get
			Return Me._provincia
		End Get
		Set
			If ((Me._provincia = value)  _
						= false) Then
				Me.Onid_provinciaChanging(value)
				Me.SendPropertyChanging
				Me._provincia = value
				Me.SendPropertyChanged("id_provincia")
				Me.Onid_provinciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="canton", Storage:="_canton", DbType:="Int NOT NULL")>  _
	Public Property id_canton() As Integer
		Get
			Return Me._canton
		End Get
		Set
			If ((Me._canton = value)  _
						= false) Then
				Me.Onid_cantonChanging(value)
				Me.SendPropertyChanging
				Me._canton = value
				Me.SendPropertyChanged("id_canton")
				Me.Onid_cantonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="distrito", Storage:="_distrito", DbType:="Int NOT NULL")>  _
	Public Property id_distrito() As Integer
		Get
			Return Me._distrito
		End Get
		Set
			If ((Me._distrito = value)  _
						= false) Then
				Me.Onid_distritoChanging(value)
				Me.SendPropertyChanging
				Me._distrito = value
				Me.SendPropertyChanged("id_distrito")
				Me.Onid_distritoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_direccion", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property direccion() As String
		Get
			Return Me._direccion
		End Get
		Set
			If (String.Equals(Me._direccion, value) = false) Then
				Me.OndireccionChanging(value)
				Me.SendPropertyChanging
				Me._direccion = value
				Me.SendPropertyChanged("direccion")
				Me.OndireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distribuidor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property distribuidor() As String
		Get
			Return Me._distribuidor
		End Get
		Set
			If (String.Equals(Me._distribuidor, value) = false) Then
				If Me._Distribuidor1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OndistribuidorChanging(value)
				Me.SendPropertyChanging
				Me._distribuidor = value
				Me.SendPropertyChanged("distribuidor")
				Me.OndistribuidorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="estado", Storage:="_estado", DbType:="Int")>  _
	Public Property id_estado() As System.Nullable(Of Integer)
		Get
			Return Me._estado
		End Get
		Set
			If (Me._estado.Equals(value) = false) Then
				Me.Onid_estadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("id_estado")
				Me.Onid_estadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referencia", DbType:="VarChar(50)")>  _
	Public Property referencia() As String
		Get
			Return Me._referencia
		End Get
		Set
			If (String.Equals(Me._referencia, value) = false) Then
				Me.OnreferenciaChanging(value)
				Me.SendPropertyChanging
				Me._referencia = value
				Me.SendPropertyChanged("referencia")
				Me.OnreferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_el", DbType:="DateTime")>  _
	Public Property creado_el() As System.Nullable(Of Date)
		Get
			Return Me._creado_el
		End Get
		Set
			If (Me._creado_el.Equals(value) = false) Then
				Me.Oncreado_elChanging(value)
				Me.SendPropertyChanging
				Me._creado_el = value
				Me.SendPropertyChanged("creado_el")
				Me.Oncreado_elChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Oportunida_OportunidadCierre", Storage:="_cierre", ThisKey:="id", OtherKey:="id_oportunidad", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property cierre() As OportunidadCierre
		Get
			Return Me._cierre.Entity
		End Get
		Set
			Dim previousValue As OportunidadCierre = Me._cierre.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._cierre.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._cierre.Entity = Nothing
					previousValue.Oportunidad = Nothing
				End If
				Me._cierre.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.Oportunidad = Me
				End If
				Me.SendPropertyChanged("cierre")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Oportunida_DistribuidorHistorico", Storage:="_DistribuidorHistoricos", ThisKey:="id", OtherKey:="id_oportunidad")>  _
	Public Property DistribuidorHistoricos() As EntitySet(Of DistribuidorHistorico)
		Get
			Return Me._DistribuidorHistoricos
		End Get
		Set
			Me._DistribuidorHistoricos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Distribuidor_Oportunida", Storage:="_Distribuidor1", ThisKey:="distribuidor", OtherKey:="id_distribuidor", IsForeignKey:=true)>  _
	Public Property Distribuidor1() As Distribuidor
		Get
			Return Me._Distribuidor1.Entity
		End Get
		Set
			Dim previousValue As Distribuidor = Me._Distribuidor1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Distribuidor1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Distribuidor1.Entity = Nothing
					previousValue.Oportunidas.Remove(Me)
				End If
				Me._Distribuidor1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Oportunidas.Add(Me)
					Me._distribuidor = value.id_distribuidor
				Else
					Me._distribuidor = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Distribuidor1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OportunidadEstado_Oportunida", Storage:="_OportunidadEstado", ThisKey:="id_estado", OtherKey:="estado", IsForeignKey:=true)>  _
	Public Property estado() As OportunidadEstado
		Get
			Return Me._OportunidadEstado.Entity
		End Get
		Set
			Dim previousValue As OportunidadEstado = Me._OportunidadEstado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OportunidadEstado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OportunidadEstado.Entity = Nothing
					previousValue.Oportunidades.Remove(Me)
				End If
				Me._OportunidadEstado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Oportunidades.Add(Me)
					Me._estado = value.estado
				Else
					Me._estado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("estado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ListaItem_Oportunida", Storage:="_PrecontactoLista", ThisKey:="id_precontacto,id_lista", OtherKey:="id_precontacto,id_lista", IsForeignKey:=true)>  _
	Public Property ListaItem() As ListaItem
		Get
			Return Me._PrecontactoLista.Entity
		End Get
		Set
			Dim previousValue As ListaItem = Me._PrecontactoLista.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PrecontactoLista.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PrecontactoLista.Entity = Nothing
					previousValue.Oportunidad = Nothing
				End If
				Me._PrecontactoLista.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Oportunidad = Me
					Me._id_precontacto = value.id_precontacto
					Me._id_lista = value.id_lista
				Else
					Me._id_precontacto = CType(Nothing, Decimal)
					Me._id_lista = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ListaItem")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="provincia_Oportunida", Storage:="_ParentProvincia", ThisKey:="id_provincia", OtherKey:="id_provincia", IsForeignKey:=true)>  _
	Public Property ParentProvincia() As provincia
		Get
			Return Me._ParentProvincia.Entity
		End Get
		Set
			Dim previousValue As provincia = Me._ParentProvincia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ParentProvincia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ParentProvincia.Entity = Nothing
					previousValue.Oportunidades.Remove(Me)
				End If
				Me._ParentProvincia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Oportunidades.Add(Me)
					Me._provincia = value.id_provincia
				Else
					Me._provincia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ParentProvincia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="cantone_Oportunida", Storage:="_ParentCanton", ThisKey:="id_provincia,id_canton", OtherKey:="provincia,canton", IsForeignKey:=true)>  _
	Public Property ParentCanton() As cantone
		Get
			Return Me._ParentCanton.Entity
		End Get
		Set
			Dim previousValue As cantone = Me._ParentCanton.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ParentCanton.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ParentCanton.Entity = Nothing
					previousValue.Oportunidades.Remove(Me)
				End If
				Me._ParentCanton.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Oportunidades.Add(Me)
					Me._provincia = value.provincia
					Me._canton = value.canton
				Else
					Me._provincia = CType(Nothing, Integer)
					Me._canton = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ParentCanton")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="distrito_Oportunida", Storage:="_ParentDistrito", ThisKey:="id_provincia,id_canton,id_distrito", OtherKey:="provincia,canton,distrito", IsForeignKey:=true)>  _
	Public Property ParentDistrito() As distrito
		Get
			Return Me._ParentDistrito.Entity
		End Get
		Set
			Dim previousValue As distrito = Me._ParentDistrito.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ParentDistrito.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ParentDistrito.Entity = Nothing
					previousValue.Oportunidades.Remove(Me)
				End If
				Me._ParentDistrito.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Oportunidades.Add(Me)
					Me._provincia = value.provincia
					Me._canton = value.canton
					Me._distrito = value.distrito
				Else
					Me._provincia = CType(Nothing, Integer)
					Me._canton = CType(Nothing, Integer)
					Me._distrito = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ParentDistrito")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DistribuidorHistoricos(ByVal entity As DistribuidorHistorico)
		Me.SendPropertyChanging
		entity.Oportunida = Me
	End Sub
	
	Private Sub detach_DistribuidorHistoricos(ByVal entity As DistribuidorHistorico)
		Me.SendPropertyChanging
		entity.Oportunida = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OportunidadCierres")>  _
Partial Public Class OportunidadCierre
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_oportunidad As Decimal
	
	Private _observacion As String
	
	Private _id_estado As System.Nullable(Of Integer)
	
	Private _referencia As String
	
	Private _creado_el As System.Nullable(Of Date)
	
	Private _Oportunidad As EntityRef(Of Oportunida)
	
	Private _estado As EntityRef(Of CierreEstado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_oportunidadChanging(value As Decimal)
    End Sub
    Partial Private Sub Onid_oportunidadChanged()
    End Sub
    Partial Private Sub OnobservacionChanging(value As String)
    End Sub
    Partial Private Sub OnobservacionChanged()
    End Sub
    Partial Private Sub Onid_estadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onid_estadoChanged()
    End Sub
    Partial Private Sub OnreferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnreferenciaChanged()
    End Sub
    Partial Private Sub Oncreado_elChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreado_elChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Oportunidad = CType(Nothing, EntityRef(Of Oportunida))
		Me._estado = CType(Nothing, EntityRef(Of CierreEstado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_oportunidad", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_oportunidad() As Decimal
		Get
			Return Me._id_oportunidad
		End Get
		Set
			If ((Me._id_oportunidad = value)  _
						= false) Then
				If Me._Oportunidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_oportunidadChanging(value)
				Me.SendPropertyChanging
				Me._id_oportunidad = value
				Me.SendPropertyChanged("id_oportunidad")
				Me.Onid_oportunidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_observacion", DbType:="VarChar(MAX)")>  _
	Public Property observacion() As String
		Get
			Return Me._observacion
		End Get
		Set
			If (String.Equals(Me._observacion, value) = false) Then
				Me.OnobservacionChanging(value)
				Me.SendPropertyChanging
				Me._observacion = value
				Me.SendPropertyChanged("observacion")
				Me.OnobservacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="estado", Storage:="_id_estado", DbType:="Int")>  _
	Public Property id_estado() As System.Nullable(Of Integer)
		Get
			Return Me._id_estado
		End Get
		Set
			If (Me._id_estado.Equals(value) = false) Then
				Me.Onid_estadoChanging(value)
				Me.SendPropertyChanging
				Me._id_estado = value
				Me.SendPropertyChanged("id_estado")
				Me.Onid_estadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_referencia", DbType:="VarChar(150)")>  _
	Public Property referencia() As String
		Get
			Return Me._referencia
		End Get
		Set
			If (String.Equals(Me._referencia, value) = false) Then
				Me.OnreferenciaChanging(value)
				Me.SendPropertyChanging
				Me._referencia = value
				Me.SendPropertyChanged("referencia")
				Me.OnreferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_el", DbType:="DateTime")>  _
	Public Property creado_el() As System.Nullable(Of Date)
		Get
			Return Me._creado_el
		End Get
		Set
			If (Me._creado_el.Equals(value) = false) Then
				Me.Oncreado_elChanging(value)
				Me.SendPropertyChanging
				Me._creado_el = value
				Me.SendPropertyChanged("creado_el")
				Me.Oncreado_elChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Oportunida_OportunidadCierre", Storage:="_Oportunidad", ThisKey:="id_oportunidad", OtherKey:="id", IsForeignKey:=true, DeleteOnNull:=true, DeleteRule:="CASCADE")>  _
	Public Property Oportunidad() As Oportunida
		Get
			Return Me._Oportunidad.Entity
		End Get
		Set
			Dim previousValue As Oportunida = Me._Oportunidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Oportunidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Oportunidad.Entity = Nothing
					previousValue.cierre = Nothing
				End If
				Me._Oportunidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.cierre = Me
					Me._id_oportunidad = value.id
				Else
					Me._id_oportunidad = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("Oportunidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CierreEstado_OportunidadCierre", Storage:="_estado", ThisKey:="id_estado", OtherKey:="estado", IsForeignKey:=true)>  _
	Public Property estado() As CierreEstado
		Get
			Return Me._estado.Entity
		End Get
		Set
			Dim previousValue As CierreEstado = Me._estado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._estado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._estado.Entity = Nothing
					previousValue.Cierres.Remove(Me)
				End If
				Me._estado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cierres.Add(Me)
					Me._id_estado = value.estado
				Else
					Me._id_estado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("estado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CierreEstados")>  _
Partial Public Class CierreEstado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _estado As Integer
	
	Private _descripcion As String
	
	Private _Cierres As EntitySet(Of OportunidadCierre)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnestadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnestadoChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cierres = New EntitySet(Of OportunidadCierre)(AddressOf Me.attach_Cierres, AddressOf Me.detach_Cierres)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_estado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property estado() As Integer
		Get
			Return Me._estado
		End Get
		Set
			If ((Me._estado = value)  _
						= false) Then
				Me.OnestadoChanging(value)
				Me.SendPropertyChanging
				Me._estado = value
				Me.SendPropertyChanged("estado")
				Me.OnestadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CierreEstado_OportunidadCierre", Storage:="_Cierres", ThisKey:="estado", OtherKey:="id_estado")>  _
	Public Property Cierres() As EntitySet(Of OportunidadCierre)
		Get
			Return Me._Cierres
		End Get
		Set
			Me._Cierres.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cierres(ByVal entity As OportunidadCierre)
		Me.SendPropertyChanging
		entity.estado = Me
	End Sub
	
	Private Sub detach_Cierres(ByVal entity As OportunidadCierre)
		Me.SendPropertyChanging
		entity.estado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.historico_distribuidores")>  _
Partial Public Class DistribuidorHistorico
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_oportunidad As Decimal
	
	Private _distribuidor As String
	
	Private _creado_el As System.Nullable(Of Date)
	
	Private _Oportunida As EntityRef(Of Oportunida)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_oportunidadChanging(value As Decimal)
    End Sub
    Partial Private Sub Onid_oportunidadChanged()
    End Sub
    Partial Private Sub OndistribuidorChanging(value As String)
    End Sub
    Partial Private Sub OndistribuidorChanged()
    End Sub
    Partial Private Sub Oncreado_elChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Oncreado_elChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Oportunida = CType(Nothing, EntityRef(Of Oportunida))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id_oportunidad", DbType:="Decimal(18,0) NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id_oportunidad() As Decimal
		Get
			Return Me._id_oportunidad
		End Get
		Set
			If ((Me._id_oportunidad = value)  _
						= false) Then
				If Me._Oportunida.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onid_oportunidadChanging(value)
				Me.SendPropertyChanging
				Me._id_oportunidad = value
				Me.SendPropertyChanged("id_oportunidad")
				Me.Onid_oportunidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_distribuidor", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property distribuidor() As String
		Get
			Return Me._distribuidor
		End Get
		Set
			If (String.Equals(Me._distribuidor, value) = false) Then
				Me.OndistribuidorChanging(value)
				Me.SendPropertyChanging
				Me._distribuidor = value
				Me.SendPropertyChanged("distribuidor")
				Me.OndistribuidorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creado_el", DbType:="DateTime")>  _
	Public Property creado_el() As System.Nullable(Of Date)
		Get
			Return Me._creado_el
		End Get
		Set
			If (Me._creado_el.Equals(value) = false) Then
				Me.Oncreado_elChanging(value)
				Me.SendPropertyChanging
				Me._creado_el = value
				Me.SendPropertyChanged("creado_el")
				Me.Oncreado_elChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Oportunida_DistribuidorHistorico", Storage:="_Oportunida", ThisKey:="id_oportunidad", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Oportunida() As Oportunida
		Get
			Return Me._Oportunida.Entity
		End Get
		Set
			Dim previousValue As Oportunida = Me._Oportunida.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Oportunida.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Oportunida.Entity = Nothing
					previousValue.DistribuidorHistoricos.Remove(Me)
				End If
				Me._Oportunida.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DistribuidorHistoricos.Add(Me)
					Me._id_oportunidad = value.id
				Else
					Me._id_oportunidad = CType(Nothing, Decimal)
				End If
				Me.SendPropertyChanged("Oportunida")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.listas")>  _
Partial Public Class lista
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id_lista As Integer
	
	Private _descripcion As String
	
	Private _Precontactos As EntitySet(Of ListaItem)
	
	Private _InteresTypes As EntitySet(Of InteresType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onid_listaChanging(value As Integer)
    End Sub
    Partial Private Sub Onid_listaChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Precontactos = New EntitySet(Of ListaItem)(AddressOf Me.attach_Precontactos, AddressOf Me.detach_Precontactos)
		Me._InteresTypes = New EntitySet(Of InteresType)(AddressOf Me.attach_InteresTypes, AddressOf Me.detach_InteresTypes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="lista", Storage:="_id_lista", DbType:="Int NOT NULL", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id_lista() As Integer
		Get
			Return Me._id_lista
		End Get
		Set
			If ((Me._id_lista = value)  _
						= false) Then
				Me.Onid_listaChanging(value)
				Me.SendPropertyChanging
				Me._id_lista = value
				Me.SendPropertyChanged("id_lista")
				Me.Onid_listaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(150)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lista_ListaItem", Storage:="_Precontactos", ThisKey:="id_lista", OtherKey:="id_lista")>  _
	Public Property ListaItems() As EntitySet(Of ListaItem)
		Get
			Return Me._Precontactos
		End Get
		Set
			Me._Precontactos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lista_InteresType", Storage:="_InteresTypes", ThisKey:="id_lista", OtherKey:="lista")>  _
	Public Property InteresTypes() As EntitySet(Of InteresType)
		Get
			Return Me._InteresTypes
		End Get
		Set
			Me._InteresTypes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Precontactos(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.list = Me
	End Sub
	
	Private Sub detach_Precontactos(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.list = Nothing
	End Sub
	
	Private Sub attach_InteresTypes(ByVal entity As InteresType)
		Me.SendPropertyChanging
		entity.lista1 = Me
	End Sub
	
	Private Sub detach_InteresTypes(ByVal entity As InteresType)
		Me.SendPropertyChanging
		entity.lista1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tipos_de_interes")>  _
Partial Public Class InteresType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _lista As Integer
	
	Private _interes As Integer
	
	Private _descripcion As String
	
	Private _PrecontactoListas As EntitySet(Of ListaItem)
	
	Private _lista1 As EntityRef(Of lista)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnlistaChanging(value As Integer)
    End Sub
    Partial Private Sub OnlistaChanged()
    End Sub
    Partial Private Sub OninteresChanging(value As Integer)
    End Sub
    Partial Private Sub OninteresChanged()
    End Sub
    Partial Private Sub OndescripcionChanging(value As String)
    End Sub
    Partial Private Sub OndescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PrecontactoListas = New EntitySet(Of ListaItem)(AddressOf Me.attach_PrecontactoListas, AddressOf Me.detach_PrecontactoListas)
		Me._lista1 = CType(Nothing, EntityRef(Of lista))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lista", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property lista() As Integer
		Get
			Return Me._lista
		End Get
		Set
			If ((Me._lista = value)  _
						= false) Then
				If Me._lista1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnlistaChanging(value)
				Me.SendPropertyChanging
				Me._lista = value
				Me.SendPropertyChanged("lista")
				Me.OnlistaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_interes", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property interes() As Integer
		Get
			Return Me._interes
		End Get
		Set
			If ((Me._interes = value)  _
						= false) Then
				Me.OninteresChanging(value)
				Me.SendPropertyChanging
				Me._interes = value
				Me.SendPropertyChanged("interes")
				Me.OninteresChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_descripcion", DbType:="VarChar(250)")>  _
	Public Property descripcion() As String
		Get
			Return Me._descripcion
		End Get
		Set
			If (String.Equals(Me._descripcion, value) = false) Then
				Me.OndescripcionChanging(value)
				Me.SendPropertyChanging
				Me._descripcion = value
				Me.SendPropertyChanged("descripcion")
				Me.OndescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="InteresType_ListaItem", Storage:="_PrecontactoListas", ThisKey:="interes,lista", OtherKey:="interes,id_lista")>  _
	Public Property ListaItems() As EntitySet(Of ListaItem)
		Get
			Return Me._PrecontactoListas
		End Get
		Set
			Me._PrecontactoListas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="lista_InteresType", Storage:="_lista1", ThisKey:="lista", OtherKey:="id_lista", IsForeignKey:=true)>  _
	Public Property lista1() As lista
		Get
			Return Me._lista1.Entity
		End Get
		Set
			Dim previousValue As lista = Me._lista1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._lista1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._lista1.Entity = Nothing
					previousValue.InteresTypes.Remove(Me)
				End If
				Me._lista1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InteresTypes.Add(Me)
					Me._lista = value.id_lista
				Else
					Me._lista = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("lista1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PrecontactoListas(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.InteresType = Me
	End Sub
	
	Private Sub detach_PrecontactoListas(ByVal entity As ListaItem)
		Me.SendPropertyChanging
		entity.InteresType = Nothing
	End Sub
End Class
